// Plugin configurations are inherited from root project

dependencies {
    // NRTSearch server dependencies
    implementation libs.nrtsearch.server

    // Use Paimon bundle for standalone JVM as recommended by official docs
    // https://paimon.apache.org/docs/master/program-api/java-api/
    // "Maven dependency: paimon-bundle"
    implementation 'org.apache.paimon:paimon-bundle:1.2.0'

    // NOTE: Hadoop and AWS dependencies are NOT included in the plugin JAR
    // They must be provided at runtime in the NRTSearch host classpath
    // Following the same pattern as production Flink deployments

    // Logging
    implementation libs.slf4j.api

    // Testing
    testImplementation("${libs.nrtsearch.server.get()}:tests")
    testImplementation libs.grpc.testing
    testImplementation libs.grpc.inprocess
    testImplementation libs.junit
    testRuntimeOnly libs.junit.vintage.engine

    // Hadoop/AWS dependencies for tests only - these simulate the host classpath
    // In production, these JARs will be in NRTSearch/lib/ directory
    testImplementation 'org.apache.hadoop:hadoop-common:3.3.6'
    testImplementation 'org.apache.hadoop:hadoop-client-api:3.3.6'
    testImplementation 'org.apache.hadoop:hadoop-client-runtime:3.3.6'
    testImplementation ('org.apache.hadoop:hadoop-aws:3.3.6') {
        exclude group: 'com.amazonaws', module: 'aws-java-sdk-bundle'
    }
    testImplementation platform('com.amazonaws:aws-java-sdk-bom:1.12.768')
    testImplementation 'com.amazonaws:aws-java-sdk-s3'
    testImplementation 'com.amazonaws:aws-java-sdk-core'
    testImplementation 'com.amazonaws:aws-java-sdk-sts'
    
    // --- Needed for gRPC client and full NrtSearch tests ---
    testImplementation libs.grpc.netty.shaded
    testImplementation libs.protobuf.java
    testImplementation libs.awaitility
    testImplementation libs.assertj.core
    testImplementation libs.mockito.core
    testImplementation libs.s3mock
}

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    // Use JUnit Platform with Vintage Engine for JUnit 4 compatibility
    useJUnitPlatform()
    exclude '**/*ITTest.class', '**/*E2ETest.class'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

distributions {
    main {
        contents {
            // Use the regular JAR with paimon-bundle dependency
            // Hadoop/AWS dependencies are provided by the host system
            from(jar)
            from(configurations.runtimeClasspath) {
                // Include paimon-bundle and other runtime dependencies
                include 'paimon-bundle-*.jar'
                include 'slf4j-api-*.jar'
            }

            from('src/main/plugin-metadata/plugin-metadata.yaml') {
                expand(
                        classname: 'com.yelp.nrtsearch.plugins.ingestion.paimon.PaimonIngestPlugin',
                        name: "nrtsearch-paimon-ingestion",
                        version: project.version,
                        description: 'Apache Paimon ingestion plugin for nrtsearch',
                        server_version: "1.+"
                )
            }
            from('src/main/plugin-metadata/plugin-security.policy')
        }
    }
}

sourceSets {
    integration {
        java.srcDirs = ['src/test/java']
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    e2e {
        java.srcDirs = ['src/test/java']
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
    e2eImplementation.extendsFrom testImplementation
    e2eRuntimeOnly.extendsFrom testRuntimeOnly
}


task e2eTest(type: Test) {
    description = 'Runs end-to-end tests.'
    group = 'verification'
    include '**/*E2ETest.class'
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
    useJUnitPlatform()
    jvmArgs '-Xmx4g', '-XX:MaxDirectMemorySize=2048m'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

// No shadowJar configuration needed with paimon-bundle approach
// Hadoop/AWS dependencies are provided by the host system classpath
